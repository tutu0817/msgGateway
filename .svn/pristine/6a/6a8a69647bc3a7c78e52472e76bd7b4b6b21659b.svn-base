package com.csair.fic.controller;

import com.csair.eterm.service.DCSInfoService;
import com.csair.fic.domain.pojo.SeatChartParam;
import com.csair.fic.domain.response.FicResponse;
import com.csair.fic.domain.response.FicResponseCode;
import com.csair.fic.domain.vo.SeatChartVo;
import com.travelsky.hub.model.input.SeatChartQueryBean;
import com.travelsky.hub.model.output.SeatChartResultBean;
import com.travelsky.hub.svc.ICheckInService;
import com.travelsky.hub.util.HubServiceException;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.apache.dubbo.config.annotation.DubboReference;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

/**
 * 航信服务接口控制器
 * @author
 */
@RestController
@Slf4j
public class SeatController {

    @Autowired
    private ICheckInService peCheckInService;


    /**
     * 离港座位图查询
     *
     * @param bean
     * @return
     */
    @PostMapping("/query/seat/chart")
    public FicResponse<SeatChartVo> querySeatChart(@RequestBody SeatChartParam bean) throws HubServiceException {
        try {
            // 参数校验
            if (StringUtils.isBlank(bean.getFltNo()) ||
                    StringUtils.isBlank(bean.getFltDate()) ||
                    StringUtils.isBlank(bean.getOrigin()) ||
                    StringUtils.isBlank(bean.getDestination())) {
                log.info("入参存在空值，请检查参数");
                return new FicResponse(FicResponseCode.CALL_FAIL, "入参存在空值，请检查参数.");
            } else {
                SeatChartVo seatChartVo = new SeatChartVo();
                SeatChartQueryBean seatChartQueryBean = new SeatChartQueryBean();
                seatChartQueryBean.setFlightNo(bean.getFltNo());
                seatChartQueryBean.setFlightDate(bean.getFltDate());
                seatChartQueryBean.setFromCity(bean.getOrigin());
                seatChartQueryBean.setToCity(bean.getDestination());
                if (StringUtils.isNotBlank(bean.getCabin())) {
                    seatChartQueryBean.setFlightClass(bean.getCabin());
                } else {
                    seatChartQueryBean.setFlightClass("*");
                }
                SeatChartResultBean seatChartResult = peCheckInService.querySeatChart(seatChartQueryBean);
                if (seatChartResult != null) {
                    seatChartVo.setSeatChart(seatChartResult.getOriginalSeatMap());
                    seatChartVo.setAircraftType(seatChartResult.getPlaneType());
                }
                return new FicResponse(FicResponseCode.CALL_SUCCESS, seatChartVo);
            }

        } catch (RuntimeException e) {
            log.error("调用PE接口获取座位图失败：{}", e.getMessage());
            return new FicResponse(FicResponseCode.CALL_FAIL, "调用PE接口获取座位图失败.");
        }
    }

    @DubboReference(version = DCSInfoService.LATEST_VERSION)
    private DCSInfoService dcsInfoService;

    /**
     * 查询航班订座信息
     */
    @PostMapping("/queryDcsFltInfo")
    public FicResponse<List<String>> queryDcsFltInfo(@RequestParam String fltNr,
                                                     @RequestParam String fltDate,
                                                     @RequestParam String latestDepCd) {
        ArrayList<String> resultList = new ArrayList<>();
        try {
            // 参数校验
            if (StringUtils.isBlank(fltNr) ||
                    StringUtils.isBlank(fltDate) ||
                    StringUtils.isBlank(latestDepCd)) {
                log.info("入参存在空值，请检查参数");
                return new FicResponse(FicResponseCode.CALL_FAIL, "入参存在空值，请检查参数.");
            }
            // 日期格式转换：yyyyMMdd —— ddMMMyy
            // ex.20211102 —— 02NOV21
            String year = fltDate.substring(0, 4);
            String month = fltDate.substring(4, 6);
            String day = fltDate.substring(6);
            month = new SimpleDateFormat("MMM", Locale.US).format(new SimpleDateFormat("MM").parse(month)).substring(0, 3).toUpperCase();
            year = year.substring(2);
            String date = day + month + year;
            // 调用远程服务获取航班订座信息
            String dcsFltInfo = dcsInfoService.getSyCommandOriginalData(fltNr, date, latestDepCd);
            resultList.add(dcsFltInfo);
            return new FicResponse(FicResponseCode.CALL_SUCCESS, resultList);
        } catch (Exception e) {
            log.error("查询订座信息失败：{}", e.getMessage());
            return new FicResponse(FicResponseCode.CALL_FAIL, "查询订座信息失败.");
        }
    }
}
